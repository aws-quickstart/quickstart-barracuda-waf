AWSTemplateFormatVersion: '2010-09-09'
Description: This master template deploys 2 Barracuda Cloud Gen WAFs for a multi-AZ, multi-tier
  deployment. It deploys to an existing VPC behind an ALB. The cluster is configured to use an S3 bucket for storage.   
  Attention **WARNING** This template creates EC2 instances and related resources. You will be billed for
  the AWS resources used if you create a stack from this template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network configuration
      Parameters:
      #- AvailabilityZones
      - VpcCIDR
      - PrivateSubnet1CIDR
      - PrivateSubnet2CIDR
      - PublicSubnet1CIDR
      - PublicSubnet2CIDR
    - Label:
        default: Barracuda WAF EC2 configuration
      Parameters:
      #- KeyPairName
      - WAFInstanceType
      - AdministratorName
      - AdministratorEmailID
      - AdministratorCompany
    - Label:
        default: WAF Autoscaling configuration
      Parameters:
      - ScalingMinSize
      - ScalingMaxSize
    - Label:
        default: AWS Quick Start configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
    ParameterLabels:
      #AvailabilityZones:
        #default: Availability Zones
      #KeyPairName:
      #  default: Key pair name
      OperatorEmail:
        default: Operator email
      PrivateSubnet1CIDR:
        default: Private subnet 1 CIDR
      PrivateSubnet2CIDR:
        default: Private subnet 2 CIDR
      PublicSubnet1CIDR:
        default: Public subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public subnet 2 CIDR
      #LicenseBucket:
      #  default: S3 bucket for WAF Licenses
      VPCCIDR:
        default: VPC CIDR
      WAFInstanceType:
        default: WAF servers instance type
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.10.0/24
    Description: CIDR block for private subnet 1 located in Availability Zone 1.
    Type: String
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.12.0/24
    Description: CIDR block for private subnet 2 located in Availability Zone 2.
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.20.0/24
    Description: CIDR block for the public (DMZ) subnet 1 located in Availability
      Zone 1.
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.22.0/24
    Description: CIDR block for the public (DMZ) subnet 2 located in Availability
      Zone 2.
    Type: String
  #KeyPairName:
  #  Description: Name of an existing public/private key pair, which allows you
  #    to securely connect to your instance after it launches.
  #  Type: AWS::EC2::KeyPair::KeyName
  AdministratorName:
    ConstraintDescription: Must be a valid name with 2 - 64 characters.
    MinLength: '2'
    MaxLength: '64'
    Type: String
  AdministratorEmailID:
    Type: String
    AllowedPattern: ([a-zA-Z0-9_+\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
           #(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
    ConstraintDescription: Must be a valid email address.
  AdministratorCompany:
    Default: None
    Type: String
    ConstraintDescription: Must be a valid company name with 2 - 64 characters.
    MinLength: '2'
    MaxLength: '64'
    Description: By entering the Name, Email Address and Company (if applicable) above
      you agree to terms and conditions outlined in the product End User License Agreement
      (https://www.barracuda.com/legal/software_license_agreement) and Privacy Policy
      (https://www.barracuda.com/legal/privacy).
  ScalingMinSize:
    Description: Enter the minimum number of WAF instances (1-20) to be available
      in the AutoScale Group
    Default: '1'
    ConstraintDescription: Must be a number between 1-20
    Type: Number
    MaxValue: '20'
    MinValue: '1'
  ScalingMaxSize:
    Description: Enter the maximum number of WAF instances (2-20) that can be created
      in the AutoScale Group
    Default: '4'
    ConstraintDescription: Must be a number between 2-20.
    Type: Number
    MaxValue: '20'
    MinValue: '2'
  #NotificationEmail:
   #  Description: Enter a valid email address to send AutoSclaing Event Notifications
   #  Type: String
   #  AllowedPattern: "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)"
   #  ConstraintDescription: Must be a valid email address.
  WAFServiceName:
    Description: Specify the Service Name to be configured on the Barracuda Web Application
      Firewall
    AllowedPattern: "[0-9a-zA-Z-_]*"
    MinLength: '2'
    MaxLength: '64'
    Type: String
  WAFServicePort:
    Description: Specify the Service Port to be configured on the Barracuda Web Application
      Firewall. This the port that is exposed to the outside world. Default is 80.
    Default: '80'
    ConstraintDescription: Must be a valid port number (1-65535).
    Type: Number
    MaxValue: '65535'
    MinValue: '1'
  #WAFServerIP:
    #Description: Specify the Server IP (inside the VPC) to be configured on the Barracuda
    #  Web Application Firewall; alternatively, you can also enter the FQDN of the
    #  instance or a downstream ELB to connect to.
    #ConstraintDescription: Must be a valid IP address or FQDN
    #MinLength: '7'
    #MaxLength: '65535'
    #Type: String
  AppServerPort:
    Description: Specify the port number on which the web application responds. This
      is the port that the Barracuda Web Application Firewall will use to connect
      to the application
    ConstraintDescription: Must be a valid port number (1-65535).
    Type: Number
    MaxValue: '65535'
    MinValue: '1'
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-examples/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  WAFInstanceType:
    Default: m4.large
    ConstraintDescription: 'Choose from the following EC2 instance types: m4.large, m4.xlarge, m4.2xlarge'
    Type: String
    Description: Choose the instance type to use for this AutoScale group
    AllowedValues:
    - m4.large
    - m4.xlarge
    - m4.2xlarge
Mappings:
  RegionMap:
    us-east-1:
      ImageID: ami-04f0a227aebdc7f98
    us-east-2:
      ImageID: ami-0fd76f5222cdf861b
    us-west-1:
      ImageID: ami-0093cec155775c3d5
    us-west-2:
      ImageID: ami-0632b7e34009e52b7
    sa-east-1:
      ImageID: ami-0fe8befbac70769dd
    ca-central-1:
      ImageID: ami-07da3622b4219a52c
    eu-central-1:
      ImageID: ami-06d9354e07474133c
    eu-west-1:
      ImageID: ami-08baefd8fc513db66
    eu-west-2:
      ImageID: ami-0dfdd307c88981449
    ap-southeast-1:
      ImageID: ami-04dcc1951b653ef8f
    ap-southeast-2:
      ImageID: ami-05d3bf5b984cf2b4d
    ap-northeast-1:
      ImageID: ami-0b2638d032763db7c
    ap-northeast-2:
      ImageID: ami-091252a4458758104
    ap-south-1:
      ImageID: ami-077e000c1003592b6
  BandwidthScaleUp:
    medium:
      bandwidth: '8750000'
    large:
      bandwidth: '17500000'
    xlarge:
      bandwidth: '35000000'
    xxlarge:
      bandwidth: '65630000'
  BandwidthScaleDown:
    medium:
      bandwidth: '8750000'
    large:
      bandwidth: '17500000'
    xlarge:
      bandwidth: '35000000'
    xxlarge:
      bandwidth: '65630000'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-igw
  InternetGatewayAttachment:
    DependsOn:
    - InternetGateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    DependsOn:
    - VPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
  PublicSubnet2:
    DependsOn:
    - VPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  PrivateSubnet1:
    DependsOn:
    - VPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
  PrivateSubnet2:
    DependsOn:
    - VPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
  PublicRouteTable:
    DependsOn:
    - VPC
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    DependsOn:
    - PublicRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    DependsOn:
    - PublicRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  AutoScalingS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${EnvironmentName}-${WAFServiceName}-barracuda-autoscaling
  ClusterBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${EnvironmentName}-${WAFServiceName}-barracuda-cluster
  BootstrapBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${EnvironmentName}-${WAFServiceName}-barracuda-bootstrap
  BWAFSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "basic-sg"
      GroupDescription: "Security group for Barracuda CloudGen WAF"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - 
          IpProtocol: tcp
          FromPort: '8000'
          ToPort: '8000'
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: '8002'
          ToPort: '8002'
          CidrIp: 0.0.0.0/0
        - 
          IpProtocol: tcp
          FromPort: '32575'
          ToPort: '32575'
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: udp
          FromPort: '32576'
          ToPort: '32576'
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          CidrIp: 0.0.0.0/0
        - 
          IpProtocol: tcp
          FromPort:
            Ref: WAFServicePort
          ToPort:
            Ref: WAFServicePort
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref PrivateSubnet1CIDR
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref PrivateSubnet2CIDR
        -
          IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: !Ref PrivateSubnet1CIDR
        -
          IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: !Ref PrivateSubnet2CIDR
        -
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref PrivateSubnet1CIDR
        -
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref PrivateSubnet2CIDR
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PrivateSubnet1CIDR
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PrivateSubnet2CIDR
        -
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref PrivateSubnet1CIDR
        -
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref PrivateSubnet2CIDR
  
  ElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${WAFServiceName}-ELB-TG"
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/index.html"
      HealthCheckPort: "8080"
      HealthCheckProtocol: "HTTP"
      #HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetType: instance
      #Targets:
      ##  - Id: !Ref Server1
      #    Port: 8080 #!Ref AppPort
      #  - Id: !Ref Server2
      #    Port: 8080 #!Ref AppPort
      VpcId: !Ref VPC
      Port: 80
      Protocol: TCP
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref WAFServiceName
              - !Ref EnvironmentName
              - "ELB-TG"
  #ElbTLSTargetGroup:
  #  Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #  Properties:
  #    Name: !Sub "${AppName}-ELB-TLS-TG"
  #    HealthCheckEnabled: True
  #    HealthCheckIntervalSeconds: 10
  #    HealthCheckPath: "/index.html"
  #    HealthCheckPort: "8443"
  #    HealthCheckProtocol: "HTTPS"
  #    #HealthCheckTimeoutSeconds: 10
  #    HealthyThresholdCount: 3
  #    UnhealthyThresholdCount: 3
   #   TargetType: instance
   #   Targets:
   #     - Id: !Ref Server1
    #      Port: 8443 #!Ref AppPort
    #    - Id: !Ref Server2
    #      Port: 8443 #!Ref AppPort
    #    #- Id: !Ref Server1
    #    #  Port: 443 #!Ref AppPort
    #    #- Id: !Ref Server2
    #    #  Port: 443 #!Ref AppPort
    #  VpcId: !Ref VPC
    #  Port: 443
    #  Protocol: TLS
    #  Tags:
    #    - Key: "Name"
    #      Value: !Join
    #        - '-'
    #        - - !Ref WAFServiceName
    #          - "ELB-TLS-TG"
  ELB1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${WAFServiceName}-LB
      IpAddressType: ipv4
      Type: network
      Subnets: 
       - !Ref PublicSubnet1
       - !Ref PublicSubnet2
      Scheme: internet-facing ##internal <<- is other option
      #LoadBalancerAttributes:
        #- LoadBalancerAttributes
      Tags:  
        - Key: Name
          Value: !Sub "${EnvironmentName}-${WAFServiceName}-LB"

  ElbHttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ELB1
      Port: 80
      Protocol: TCP
      DefaultActions:
        - TargetGroupArn: !Ref ElbTargetGroup
          Type: forward
 # ElbHttpsListener:
 #   Type: 'AWS::ElasticLoadBalancingV2::Listener'
 #   Properties:
 #     LoadBalancerArn: !Ref ELB1
 #     Certificates:
 #       - CertificateArn: !GetAtt MakeAndImportCert.CertArn
 #     Port: 443
 #    Protocol: TLS
 #    SslPolicy: "ELBSecurityPolicy-TLS-1-2-Ext-2018-06" #!Ref SslPolicy
 #     DefaultActions:
 #       - TargetGroupArn: !Ref ElbTLSTargetGroup
 #         Type: forward
  BWAFAutoScalingS3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: BWAFAutoScalingS3AcccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: ClusterBucket
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: BootstrapBucket
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: ClusterBucket
                - "/*"
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: BootstrapBucket
                - "/*"
      - PolicyName: CloudWatchLogsFullAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - logs:CreateLogStream
            - logs:DescribeLogStreams
            - logs:CreateLogGroup
            - logs:PutLogEvents
            - logs:PutRetentionPolicy
            Effect: Allow
            Resource: "*"
  BWAFAutoScalingInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: BWAFAutoScalingS3AccessRole
  BWAFAutoScaleLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceMonitoring: 'true'
      AssociatePublicIpAddress: true
      #KeyName: !Ref KeyPairName
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - ImageID
      InstanceType:
        Ref: WAFInstanceType
      IamInstanceProfile:
        Ref: BWAFAutoScalingInstanceProfile
      SecurityGroups:
      - Ref: BWAFSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ""
          - - "#!/bin/bash\n"
            - "/opt/aws/bwaf/aws_autoscale.pl --command init-config"
            - " --stack "
            - Ref: AWS::StackName
            - " --resource BWAFAutoScaleLaunchConfig "
            - " --region "
            - Ref: AWS::Region
            - " --s3bucketname "
            - Ref: AutoScalingS3Bucket
            - " --config "
            - Fn::Join:
              - ":"
              - - Ref: WAFServiceName
                - Ref: WAFServicePort
                - !GetAtt ELB1.DNSName
                - Ref: AppServerPort
            - "\n\n"
            - 'Eula Options: '
            - " --signature "
            - Ref: AdministratorName
            - " --organization "
            - Ref: AdministratorCompany
            - " --email "
            - Ref: AdministratorEmailID
            - "\n"
  BWAFAutoScalingGroup:
    DependsOn: ElbTargetGroup
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize:
        Ref: ScalingMinSize
      HealthCheckGracePeriod: '1200'
      MaxSize:
        Ref: ScalingMaxSize
      VPCZoneIdentifier:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      LaunchConfigurationName:
        Ref: BWAFAutoScaleLaunchConfig
      TargetGroupARNs:
        - Ref: ElbTargetGroup
        #- Ref: ElbTLSTargetGroup
      #AvailabilityZones:
      #  Fn::GetAZs: 
      #    Ref: "AWS::Region" #!Ref AvailabilityZones #!Select  ["1", [AvailabilityZones] ] 
      #NotificationConfigurations:
      #- TopicARN:
      #    Ref: NotificationTopic
      #  NotificationTypes:
      #  - autoscaling:EC2_INSTANCE_LAUNCH
      #  - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
      #  - autoscaling:EC2_INSTANCE_TERMINATE
      #  - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      #LoadBalancerNames:
      #  - !GetAtt ELB1.LoadBalancerName
      HealthCheckType: EC2
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        MaxBatchSize: '1'
        MinInstancesInService:
          Ref: ScalingMinSize
  BWAFScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      ScalingAdjustment: '1'
      Cooldown: '300'
      AutoScalingGroupName:
        Ref: BWAFAutoScalingGroup
      AdjustmentType: ChangeInCapacity
  BWAFScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      ScalingAdjustment: "-1"
      Cooldown: '300'
      AutoScalingGroupName:
        Ref: BWAFAutoScalingGroup
      AdjustmentType: ChangeInCapacity
  NetworkInAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: BWAFAutoScalingGroup
      AlarmActions:
      - Ref: BWAFScaleUpPolicy
      Statistic: Average
      Threshold: '9175040'
      AlarmDescription: Scale-up if the NetworkIn throughput > 70% of max throughput
        for 5 minutes
      Namespace: AWS/EC2
      Period: '300'
      MetricName: NetworkIn
  NetworkInAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: BWAFAutoScalingGroup
      AlarmActions:
      - Ref: BWAFScaleDownPolicy
      Statistic: Average
      Threshold: '5242880'
      AlarmDescription: Scale-down if the NetworkIn throughput < 50% of max throughput
        for 10 periods of 15 minutes
      Namespace: AWS/EC2
      Period: '900'
      MetricName: NetworkIn
  NetworkOutAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: BWAFAutoScalingGroup
      AlarmActions:
      - Ref: BWAFScaleUpPolicy
      Statistic: Average
      Threshold: '9175040'
      AlarmDescription: Scale-up if the NetworkOut throughput > 70% of max throughput
        for 5 minutes
      Namespace: AWS/EC2
      Period: '60'
      MetricName: NetworkOut
  NetworkOutAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: BWAFAutoScalingGroup
      AlarmActions:
      - Ref: BWAFScaleDownPolicy
      Statistic: Average
      Threshold: '5242880'
      AlarmDescription: Scale-down if the NetworkOut throughput < 50% of max throughput
        for 10 periods of 15 minutes
      Namespace: AWS/EC2
      Period: '900'
      MetricName: NetworkOut
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: BWAFAutoScalingGroup
      AlarmActions:
      - Ref: BWAFScaleUpPolicy
      Statistic: Average
      Threshold: '85'
      AlarmDescription: 'Scale out if WAF CPU > 85% after 5 successive intervals of
        60 seconds '
      Namespace: AWS/EC2
      Period: '60'
      MetricName: CPUUtilization
  CPUAlarmNormal:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: BWAFAutoScalingGroup
      AlarmActions:
      - Ref: BWAFScaleDownPolicy
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Scale in WAF if CPU < 60% for 10 successive intervals of 15
        minutes
      Namespace: AWS/EC2
      Period: '900'
      MetricName: CPUUtilization
